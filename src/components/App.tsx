import { FC, useEffect, useState } from "react";

import {
  Stack,
  Accordion,
  FormSelect,
  Alert,
  OverlayTrigger,
  Button,
  Tooltip,
} from "react-bootstrap";
import { useGetStatisticsQuery } from "../redux/rtk";
import { IData } from "../utils/interfaces";
import MyChart from "./MyChart";
import MyTable from "./MyTable";
import SkeletonTable from "./SkeletonTable";

import DetailsHeader from "./DetailsHeader";
import { useAppDispatch, useAppSelector } from "../utils/hooks/redux";
import { getStatus, setStatus } from "../redux/slices/statusSlice";
import { setData } from "../redux/slices/dataSlice";
import DetailsTable from "./DetailsTable";
import Footer from "./Footer";
import ErrorBoundary from "./ErrorBoundary";
import { InfoCircle, CaretDown } from "react-bootstrap-icons";

const App: FC = () => {
  const dispatch = useAppDispatch();
  const { isError, isFetching, isSuccess } = useAppSelector(getStatus);
  const [interval, setInterval] = useState(7);

  const {
    data,
    isSuccess: apiSuccess,
    isError: apiError,
    isFetching: apiFetching,
  } = useGetStatisticsQuery({
    channelId: "aaeb08bd-a5e5-4425-98af-fd53b45f3b0a",
    interval,
  });

  useEffect(() => {
    console.log(isError);

    dispatch(
      setStatus({
        isFetching: apiFetching,
        isError: apiError,
        isSuccess: apiSuccess,
      })
    );
  }, [apiSuccess, apiError, apiFetching]);

  const formatData = (data: IData[] | undefined) => {
    if (!data || data.length === 0) {
      return { datasets: [], users: [] };
    }

    const datasets = data.map((data) => data.datasets);
    const users = data.map((data) => data.users);

    return { datasets, users };
  };

  useEffect(() => {
    const { datasets, users } = formatData(data);

    dispatch(setData({ datasets, users }));
  }, [data]);

  const handleChange = (value: number) => {
    setInterval(value);
  };

  return (
    <section className="App">
      <Stack className="container">
        <div className="mt-12 mb-8">
          <Stack direction="horizontal" className="flex gap-2 mb-4">
            <h2 className="text-2xl">–û—Ç—Ç–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏</h2>

            <OverlayTrigger
              overlay={(props) => (
                <Tooltip className="my-tooltip" {...props}>
                  <p className="pb-2">
                    –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è —Ä–µ–∫–ª–∞–º–Ω—ã–µ
                    –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏
                    –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏.
                  </p>
                  <p className="pb-2">
                    –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ–≥–æ—Ä—Ç–∞) –ø–æ
                    –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –≤—Ä–µ–º–µ–Ω–∏ (–¥–µ–Ω—å –∏–ª–∏ –±–æ–ª—å—à–µ), –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏—Ö
                    –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º.
                  </p>
                  <p>
                    –ó–¥–æ—Ä–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫ –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å –≤–∞—à –∫–∞–Ω–∞–ª –¥–æ–ª–≥–æ, –±–µ–∑ —Ä–µ–∑–∫–∏—Ö
                    –¥–≤–∏–∂–µ–Ω–∏–π. –ö–æ—Ä–æ—Ç–∫–∏–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∏ –º–∞—Å—Å–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è ‚Äì
                    –ø—Ä–∏–∑–Ω–∞–∫ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–±–æ—Ç—ã, –Ω–∞–∫—Ä—É—Ç–∫–∏).
                  </p>
                </Tooltip>
              )}
              placement="bottom"
            >
              <CaretDown
                className="transition-all hover:rotate-180"
                size="24"
              />
            </OverlayTrigger>
          </Stack>

          <FormSelect
            className="w-auto h-[52px] pr-12"
            style={{ backgroundSize: "35px 18px" }}
            onChange={(e) => handleChange(+e.currentTarget.value)}
          >
            <option value={7}>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é</option>
            <option value={14}>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏</option>
            <option value={21}>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–µ–¥–µ–ª–∏</option>
          </FormSelect>
        </div>

        <Stack className="mb-12 text-sm md:text-base">
          <Stack direction="horizontal" className="flex gap-2 mb-4">
            <h2 className="text-2xl">–¢–∞–±–ª–∏—Ü–µ–π</h2>

            <OverlayTrigger
              overlay={(props) => (
                <Tooltip className="my-tooltip" {...props}>
                  <p className="pb-2">
                    <span className="font-bold">–î–∞—Ç–∞</span> ‚Äì —ç—Ç–æ –∫–æ–≥–æ—Ä—Ç–∞,
                    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–∏—à–µ–¥—à–∏–µ –∑–∞ –¥–µ–Ω—å.
                  </p>
                  <p className="pb-2">
                    <span className="font-bold">–°–≤–æ–¥–∫–∞:</span>
                    <br />
                    üë• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏—à–ª–æ –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å ‚Üí –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å,
                    <br />
                    üìâ —Å—É–º–º–∞—Ä–Ω—ã–π –æ—Ç—Ç–æ–∫,
                    <br />
                    üïí —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –∫–æ–≥–æ—Ä—Ç—ã.
                  </p>
                  <p>
                    <span className="font-bold">–Ø—á–µ–π–∫–∏ –ø–æ –¥–Ω—è–º:</span>
                    <br />
                    % ‚Äì –æ—Ç—Ç–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è (–Ω–µ –ø–µ—Ä–≤–æ–≥–æ). <br />
                    –ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.{" "}
                    <br />
                    –í—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞ ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—à–µ–¥—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. <br />
                    –ß–µ–º —è—Ä—á–µ üü• –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç ‚Äì —Ç–µ–º –±–æ–ª—å—à–µ —É—à–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤
                    —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.
                  </p>
                </Tooltip>
              )}
              placement="bottom"
            >
              <CaretDown
                className="transition-all hover:rotate-180"
                size="24"
              />
            </OverlayTrigger>
          </Stack>

          <ErrorBoundary
            temp={
              <Alert key="danger" variant="danger">
                –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
              </Alert>
            }
          >
            {isFetching ? <SkeletonTable /> : <MyTable />}
          </ErrorBoundary>
        </Stack>

        <Stack className="mb-12">
          <Stack direction="horizontal" className="flex gap-2 mb-4">
            <h2 className="text-2xl">–ì—Ä–∞—Ñ–∏–∫–æ–º</h2>

            <OverlayTrigger
              overlay={(props) => (
                <Tooltip className="my-tooltip" {...props}>
                  <p className="pb-2">
                    –ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ –ø–æ–∫–∞–∑–∞–Ω –æ—Ç—Ç–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–æ–≥–æ—Ä—Ç–∞—Ö –ø–æ –¥–Ω—è–º. –î–ª—è
                    –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤
                    –ø—Ä–æ—Ü–µ–Ω—Ç—ã.
                  </p>
                  <p className="pb-2">
                    üß† –ß–µ–º –±–æ–ª–µ–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –±–µ–∑ —Ä–µ–∑–∫–∏—Ö –ø–∞–¥–µ–Ω–∏–π –≤–Ω–∏–∑,
                    —Ç–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ß–µ–º –±—ã—Å—Ç—Ä–µ–µ –ø–∞–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤–Ω–∏–∑ ‚Äì
                    —Ç–µ–º —Ö—É–∂–µ –∞—É–¥–∏—Ç–æ—Ä–∏—è, —Å–ª–∏–≤ –±—é–¥–∂–µ—Ç–∞.
                  </p>
                  <p className="pb-2">
                    –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ ‚Äì –æ–±—â–∏–π –æ—Ç—Ç–æ–∫ –≤ –∫–æ–≥–æ—Ä—Ç–µ.
                  </p>
                  <p className="pb-2">‚Üí –ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ ‚Äì –¥–Ω–∏ –∂–∏–∑–Ω–∏ –∫–æ–≥–æ—Ä—Ç—ã.</p>
                  <p className="pb-2">
                    ‚Üë –ü–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ —Å–≤–µ—Ä—Ö—É ‚Äì –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.
                  </p>
                </Tooltip>
              )}
              placement="bottom"
            >
              <CaretDown
                className="transition-all hover:rotate-180"
                size="24"
              />
            </OverlayTrigger>
          </Stack>

          <ErrorBoundary
            temp={
              <Alert key="danger" variant="danger">
                –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
              </Alert>
            }
          >
            <MyChart />
          </ErrorBoundary>
        </Stack>

        <Stack className="mb-12">
          <DetailsHeader />
          <ErrorBoundary
            temp={
              <Alert key="danger" variant="danger">
                –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
              </Alert>
            }
          >
            {isFetching ? <SkeletonTable withHead={false} /> : <DetailsTable />}
          </ErrorBoundary>
        </Stack>
      </Stack>

      <Footer />
    </section>
  );
};

export default App;
